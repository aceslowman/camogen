{
    "name": "Glyph",
    "precision": "\n\t\t#ifdef GL_ES\n\t\tprecision highp float;\n\t\t#endif \n\t",
    "vert": "\n\t\tattribute vec3 aPosition;\n\t\tattribute vec2 aTexCoord;\n\n\t\tvarying vec2 vTexCoord;\n\n\t\tvoid main() {\n\t\t    vTexCoord = aTexCoord;\n\n\t\t    vec4 positionVec4 = vec4(aPosition,1.0);\n\t\t    positionVec4.xy = positionVec4.xy * vec2(1.,-1.);\n\n\t\t    gl_Position = positionVec4;\n\t\t}\n\t",
    "frag": "\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x * 34.0) + 1.0) * x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) {\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289(i);\n    vec4 p = permute(permute(permute(\n                i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n            i.y + vec4(0.0, i1.y, i2.y, 1.0)) +\n        i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z); //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_); // mod(j,N)\n\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 p0 = vec3(a0.xy, h.x);\n    vec3 p1 = vec3(a0.zw, h.y);\n    vec3 p2 = vec3(a1.xy, h.z);\n    vec3 p3 = vec3(a1.zw, h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1),\n        dot(p2, x2), dot(p3, x3)));\n}\n\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n    return mod289(((x * 34.0) + 1.0) * x);\n}\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0))/6.0\n        0.366025403784439, // 0.5*(sqrt(3.0)-1.0)\n        -0.577350269189626, // -1.0 + 2.0 * C.x\n        0.024390243902439); // 1.0 / 41.0\n    // First corner\n    vec2 i = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) +\n        i.x + vec3(0.0, i1.x, 1.0));\n\n    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n    m = m * m;\n    m = m * m;\n\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n\n    // Compute final noise value at P\n    vec3 g;\n    g.x = a0.x * x0.x + h.x * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n\t\tvarying vec2 vTexCoord;\n\n\t\tuniform sampler2D tex0;\n\t\tuniform vec2 resolution; // {\"name\":\"sys\"}\n\t\tuniform vec2 dimensions; // {\"name\":\"dim\",\"default\":[100.0,100.0]}\n\t\tuniform vec2 scale; \t // {\"name\":\"sc\",\"default\":[3,1]}\n\t\tuniform vec2 padding; \t // {\"name\":\"pad \",\"default\":[0.1,0.1]}\n\t\tuniform vec2 offset;     // {\"name\":\"off\",\"default\":[0.0,0.0]}\n\n\t\tvec2 gridCoordinates(vec2 uv, vec2 dim) {\n\t\t    // not sure why dim-1.\n\t\t    vec2 g = floor(uv * dim) / (dim-1.);\n\n\t\t    return g;\n\t\t}\n\n\t\tvec2 modCoordinates(vec2 uv, vec2 dim) {\n\t\t    float s_x = mod(uv.x, 1.0 / dim.x)/(1.0/dim.x);\n\t\t    float s_y = mod(uv.y, 1.0 / dim.y)/(1.0/dim.y);\n\n\t\t    return vec2(s_x,s_y);\n\t\t}\n\n\t\tfloat linearPosition(vec2 uv, vec2 dim){\n\t\t\tfloat x_pos = mod(uv.x,1.0/dim.x);\n\t\t\tfloat y_pos = mod(uv.y,1.0/dim.y);\n\n\t\t\treturn x_pos;\n\t\t}\n\n\t\tvoid main() {\n\t\t    vec3 color = vec3(0.0);\n\t\t    vec4 src = texture2D(tex0, vTexCoord);\n\t\t    \n\t\t    vec2 m_grid = modCoordinates(src.rg,dimensions);\n\t\t    vec2 grid = gridCoordinates(m_grid,dimensions);\n\t\t    float seed = linearPosition(src.rg,dimensions);\n\n\t\t    float n = snoise(vec3((grid+offset)*scale,seed));    \n\n\t\t\tcolor = vec3(n);\n\t\t\t// color = vec3(grid,0.0);\n\n\t\t    gl_FragColor = vec4(color,1.0);\n\t\t}\n\t",
    "uniforms": [{
        "name": "resolution",
        "elements": [{
            "name": "x:",
            "value": 1,
            "graph": {
                "nodes": []
            }
        }, {
            "name": "y:",
            "value": 1,
            "graph": {
                "nodes": []
            }
        }]
    }, {
        "name": "dimensions",
        "elements": [{
            "name": "x:",
            "value": 100,
            "graph": {
                "nodes": []
            }
        }, {
            "name": "y:",
            "value": 100,
            "graph": {
                "nodes": []
            }
        }]
    }, {
        "name": "scale",
        "elements": [{
            "name": "x:",
            "value": 3,
            "graph": {
                "nodes": []
            }
        }, {
            "name": "y:",
            "value": 1,
            "graph": {
                "nodes": []
            }
        }]
    }, {
        "name": "padding",
        "elements": [{
            "name": "x:",
            "value": 0.1,
            "graph": {
                "nodes": []
            }
        }, {
            "name": "y:",
            "value": 0.1,
            "graph": {
                "nodes": []
            }
        }]
    }, {
        "name": "offset",
        "elements": [{
            "name": "x:",
            "value": 0,
            "graph": {
                "nodes": []
            }
        }, {
            "name": "y:",
            "value": 0,
            "graph": {
                "nodes": []
            }
        }]
    }]
}