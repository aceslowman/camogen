{
  "type": "Shader",
  "name": "Lumakey",
  "inputs": ["tex0", "tex1"],
  "outputs": ["out"],
  "precision": "\n\t\t#ifdef GL_ES\n\t\tprecision highp float;\n\t\t#endif \n\t",
  "vert": "attribute vec3 aPosition;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\nvoid main() {\n    vTexCoord = aTexCoord;\n    vec4 positionVec4 = vec4(aPosition, 1.0);\n    positionVec4.xy = positionVec4.xy * vec2(1., -1.);\n    gl_Position = positionVec4;\n}",
  "frag": "varying vec2 vTexCoord;\nuniform sampler2D tex0;\nuniform sampler2D tex1;\nuniform float threshold; // {'default': 0.5}\nuniform bool flip;\n\n// https://github.com/hughsk/glsl-luma\nfloat luma(vec3 color) {\n  \treturn dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nfloat luma(vec4 color) {\n  \treturn dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n\nvoid main() {\n    vec4 src0 = texture2D(tex0,vTexCoord);\n    vec4 src1 = texture2D(tex1,vTexCoord);\n    vec4 color = vec4(0.0);\n  \n  \tfloat brightness = luma(src1);\n  \t//brightness = smoothstep(brightness - 0.1,brightness + 0.1,0.5);\n  \n  \tif(brightness > threshold) {\n    \tcolor = flip ? src1 : src0;\n    } else {\n      \tcolor = flip ? src0 : src1;\n    }\n  \n    gl_FragColor = color;\n}"
}
