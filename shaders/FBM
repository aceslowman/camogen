{
     "type": "Shader",
     "name": "FBM",
     "precision": "\n\t\t#ifdef GL_ES\n\t\tprecision highp float;\n\t\t#endif \n\t",
     "vert": "attribute vec3 aPosition;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\n\nvoid main() {\n    vTexCoord = aTexCoord;\n\n    vec4 positionVec4 = vec4(aPosition,1.0);\n    positionVec4.xy = positionVec4.xy * vec2(1.,-1.);\n\n    gl_Position = positionVec4;\n}\n",
     "frag": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// from https://thebookofshaders.com/13/\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 5\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nuniform vec2 resolution;\nuniform float time;\nuniform float cloudcover;\nuniform float wdir;\n\nvarying vec2 vTexCoord;\n\nvoid main() {\n  vec2 uv = vTexCoord;\n  uv.y *= resolution.y / resolution.x;\n  vec4 color = vec4(0.0);\n  \n  // CLOUDS\n  float scale = 5.0;\n  vec2 offset = vec2(uv.x,uv.y);\n  vec2 wind = vec2(sin(wdir), cos(wdir));\n\n  // get wind direction\n  offset.x += wind.x * time; \n  offset.y += wind.y * time;\n\n  vec4 cloud = vec4(0.0);\n  cloud = vec4(fbm((uv*scale) + offset));\n\n  gl_FragColor = cloud;\n}"
}