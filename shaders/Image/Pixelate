{
  "type": "Shader",
  "name": "Pixelate",
  "precision": "#ifdef GL_ES \n   precision highp float; \n#endif \n",
  "vert": "attribute vec3 aPosition; \nattribute vec2 aTexCoord; \nvarying vec2 vTexCoord; \n\nvoid main() {  \n   vTexCoord = aTexCoord; \n   vec4 positionVec4 = vec4(aPosition, 1.0); \n   positionVec4.xy = positionVec4.xy * vec2(1., -1.); \n   gl_Position = positionVec4; \n}",
  "frag": "// adapted from https://webgl-shaders.com/shaders/frag-pixelated.glsl\n\nvarying vec2 vTexCoord; \nuniform sampler2D tex0; \nuniform vec2 resolution; \nuniform float size;\n\n/*\n * The main program\n */\nvoid main() {\n  \tvec2 v_uv = vTexCoord;\n\t// Calculate the square size in pixel units based on the mouse position\n\tfloat square_size = floor(2.0 + 30.0 * (size));\n\n\t// Calculate the square center and corners\n\tvec2 center = square_size * floor(v_uv * resolution / square_size) + square_size * vec2(0.5, 0.5);\n\tvec2 corner1 = center + square_size * vec2(-0.5, -0.5);\n\tvec2 corner2 = center + square_size * vec2(+0.5, -0.5);\n\tvec2 corner3 = center + square_size * vec2(+0.5, +0.5);\n\tvec2 corner4 = center + square_size * vec2(-0.5, +0.5);\n\n\t// Calculate the average pixel color\n\tvec3 pixel_color = 0.4 * texture2D(tex0, center / resolution).rgb;\n\tpixel_color += 0.15 * texture2D(tex0, corner1 / resolution).rgb;\n\tpixel_color += 0.15 * texture2D(tex0, corner2 / resolution).rgb;\n\tpixel_color += 0.15 * texture2D(tex0, corner3 / resolution).rgb;\n\tpixel_color += 0.15 * texture2D(tex0, corner4 / resolution).rgb;\n\n\t// Fragment shader output\n\tgl_FragColor = vec4(pixel_color, 1.0);\n}"
}
