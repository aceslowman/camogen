{
  "type": "Shader",
  "name": "Blur",
  "inputs": ["tex0"],
  "outputs": ["out"],
  "precision": "\n\t\t#ifdef GL_ES\n\t\tprecision highp float;\n\t\t#endif \n\t",
  "vert": "attribute vec3 aPosition;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n    vTexCoord = aTexCoord;\n    vec4 positionVec4 = vec4(aPosition,1.0);\n    positionVec4.xy = positionVec4.xy * vec2(1.,-1.);\n    gl_Position = positionVec4;\n}\n\t",
  "frag": "// Adapted from:\n// https://github.com/genekogan/Processing-Shader-Examples/blob/master/TextureShaders/data/blur.glsl\n\nuniform vec2 resolution;\nvarying vec2 vTexCoord;\nuniform sampler2D tex0;\nuniform int blurSize;       \nuniform int horizontalPass; // 0 or 1 to indicate vertical or horizontal pass\nuniform float sigma;        // The sigma value for the gaussian function: higher value means more blur\n                            // A good value for 9x9 is around 3 to 5\n                            // A good value for 7x7 is around 2.5 to 4\n                            // A good value for 5x5 is around 2 to 3.5\n                            // ... play around with this based on what you need :)\n\n//const vec2 texOffset = vec2(1.0, 1.0);\nuniform vec2 texOffset;\nconst float PI = 3.14159265;\n\nconst float MAX_PIXELSPERSIDE = 10.0;\n\nvoid main() {  \n  vec2 uv = vTexCoord;\n  float numBlurPixelsPerSide = float(blurSize / 2); \n  \n  // Incremental Gaussian Coefficent Calculation (See GPU Gems 3 pp. 877 - 889)\n  vec3 incrementalGaussian;\n  incrementalGaussian.x = 1.0 / (sqrt(2.0 * PI) * sigma);\n  incrementalGaussian.y = exp(-0.5 / (sigma * sigma));\n  incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;\n\n  vec4 avgValue = vec4(0.0, 0.0, 0.0, 0.0);\n  float coefficientSum = 0.0;\n\n  // Take the central sample first...\n  avgValue += texture2D(tex0, uv) * incrementalGaussian.x;\n  coefficientSum += incrementalGaussian.x;\n  incrementalGaussian.xy *= incrementalGaussian.yz;\n\n  // Go through the remaining 8 vertical samples (4 on each side of the center)\n  for (float i = 1.0; i <= MAX_PIXELSPERSIDE; i++) { \n    if(i < numBlurPixelsPerSide) {    \t\n      avgValue += texture2D(tex0, uv - i * texOffset) * incrementalGaussian.x;         \n      avgValue += texture2D(tex0, uv + i * texOffset) * incrementalGaussian.x;         \n      coefficientSum += 2.0 * incrementalGaussian.x;\n      incrementalGaussian.xy *= incrementalGaussian.yz;\n    }\n  }\n\n  gl_FragColor = avgValue / coefficientSum;\n}\n"
}
